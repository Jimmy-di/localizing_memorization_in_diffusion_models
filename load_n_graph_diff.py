import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd
import argparse

def create_parser():
    parser = argparse.ArgumentParser(description='Graph Results')

    parser.add_argument(
        '-f',
        '--filename',
        default='test.png', 
        type=str,
        dest="fname",
        help='Graph file save path\').'
    )

    parser.add_argument(
        '-c',
        '--cluster',
        default=0, 
        type=int,
        dest="cluster",
        help='Cluster Number\').'
    )

    args = parser.parse_args()
    return args


def main():

    all_dist = [[0, 216.02041098746943, 175.1264984795065, 229.60864249319528, 223.2223183240049, 268.45731352884786, 124.52478514558044, 231.75913891638208, 193.60279808642548, 230.69459962566566, 135.31829040635097, 192.40831614390234, 190.7428952534441, 219.7225793033604, 103.73791043291665, 79.3208106174306, 267.5481434763429, 228.93733518333116, 229.12208975209967, 190.4569096041423, 211.12240415472561], [216.02041098746943, 0, 172.58656346971424, 191.6860007681375, 179.6485334494053, 232.2570989802514, 207.22476126720989, 246.4260593925083, 177.27801100185712, 199.13881606029358, 220.70726342290905, 169.54531338450593, 180.0511785701007, 209.12487173973906, 212.38019250989277, 200.82660517838258, 237.54773977701788, 184.5878004025644, 200.49278363468954, 161.33543965887557, 198.5658986195124], [175.1264984795065, 172.58656346971424, 0, 175.929075305222, 175.21550544152782, 229.62430459054008, 185.36836873297693, 196.77351545241046, 147.6122987818227, 163.5225679737881, 195.2404158164824, 144.61097399426708, 138.04609426341779, 185.53592601413456, 180.53761183482408, 164.79548910295762, 234.8325086194369, 178.6226602770865, 196.06949328122818, 146.57869570369465, 198.8153761835749], [229.60864249319528, 191.6860007681375, 175.929075305222, 0, 197.3456304762703, 236.9796823655238, 227.12211120008286, 253.58026309779765, 184.99074289911627, 208.87265612552352, 241.24775322059176, 182.53619617373494, 179.69673611633587, 229.18073841226445, 231.77043807912327, 218.74143729834054, 240.0168471707118, 190.92568753654288, 225.0394786802554, 170.57128823534998, 232.31251378583315], [223.2223183240049, 179.6485334494053, 175.21550544152782, 197.3456304762703, 0, 216.76256208928638, 229.78122412748695, 232.43148919041386, 180.55680826101118, 207.04412252369676, 232.8135425367675, 181.64834466182168, 178.74240266847713, 210.91275802896638, 220.7433218189977, 212.4266999175457, 231.62705550990873, 207.15235165616917, 225.22559063944286, 179.64280934485944, 228.78427344408217], [268.45731352884786, 232.2570989802514, 229.62430459054008, 236.9796823655238, 216.76256208928638, 0, 261.58647632807504, 272.9095856953215, 225.0015342285826, 264.7057486872339, 277.981947961214, 228.9497970087649, 220.39333918863642, 266.67570582657174, 266.20046420777203, 255.5834701240326, 164.00872627559357, 237.2968549086824, 249.19877964373237, 208.79501190157703, 266.4936046148154], [124.52478514558044, 207.22476126720989, 185.36836873297693, 227.12211120008286, 229.78122412748695, 261.58647632807504, 0, 239.80014817711384, 193.81759417957224, 229.5966354790046, 147.7436323091172, 192.39029922399575, 191.97357183598322, 224.9428193130749, 134.69112157331674, 95.01301887830611, 260.5487310367412, 221.66585510922323, 228.5605188663794, 184.14332644541517, 216.88153363588964], [231.75913891638208, 246.4260593925083, 196.77351545241046, 253.58026309779765, 232.43148919041386, 272.9095856953215, 239.80014817711384, 0, 214.02203874607525, 254.7615789504071, 249.81433567291592, 227.19904227135515, 205.05481224181602, 253.4300186929554, 235.95706935014704, 222.97320261191726, 279.9309213094799, 243.24054814477054, 270.3377995011661, 215.50056605225694, 263.0060707627875], [193.60279808642548, 177.27801100185712, 147.6122987818227, 184.99074289911627, 180.55680826101118, 225.0015342285826, 193.81759417957224, 214.02203874607525, 0, 203.2553585960738, 207.35620530759027, 156.1608559899672, 83.98792057327658, 207.45317657216748, 193.99680910232013, 179.47452409556956, 226.45478601846625, 175.83045688492714, 199.31922159620703, 102.98784251506677, 217.41614418707707], [230.69459962566566, 199.13881606029358, 163.5225679737881, 208.87265612552352, 207.04412252369676, 264.7057486872339, 229.5966354790046, 254.7615789504071, 203.2553585960738, 0, 247.63609821443606, 193.3992615273269, 197.93129737787066, 217.52410267657265, 230.78493460041594, 221.46991003707282, 274.7964977342613, 225.63692255875347, 227.94994312203502, 200.31489624016476, 236.65184132948053], [135.31829040635097, 220.70726342290905, 195.2404158164824, 241.24775322059176, 232.8135425367675, 277.981947961214, 147.7436323091172, 249.81433567291592, 207.35620530759027, 247.63609821443606, 0, 195.90394058795292, 207.02829843270243, 223.71364059186766, 134.5313519800788, 113.26427243083928, 276.4828817936228, 234.91608705410067, 240.56484969983183, 205.49104117347176, 211.01398802687163], [192.40831614390234, 169.54531338450593, 144.61097399426708, 182.53619617373494, 181.64834466182168, 228.9497970087649, 192.39029922399575, 227.19904227135515, 156.1608559899672, 193.3992615273269, 195.90394058795292, 0, 148.3339798738699, 202.99443901135743, 191.77935962476175, 175.5697691393382, 235.14987515971558, 188.25169744923832, 193.81880480267193, 150.05728426167317, 199.01314450938645], [190.7428952534441, 180.0511785701007, 138.04609426341779, 179.69673611633587, 178.74240266847713, 220.39333918863642, 191.97357183598322, 205.05481224181602, 83.98792057327658, 197.93129737787066, 207.02829843270243, 148.3339798738699, 0, 205.0979019434205, 191.14212432328617, 178.27371368215262, 222.18140017998863, 175.75782795145366, 199.5152824772706, 109.15032051332956, 213.33475235290695], [219.7225793033604, 209.12487173973906, 185.53592601413456, 229.18073841226445, 210.91275802896638, 266.67570582657174, 224.9428193130749, 253.4300186929554, 207.45317657216748, 217.52410267657265, 223.71364059186766, 202.99443901135743, 205.0979019434205, 0, 216.14142839671425, 206.69805640517254, 268.76940905681136, 231.35271418836462, 233.24084473728203, 203.57896037124226, 221.8062063230069], [103.73791043291665, 212.38019250989277, 180.53761183482408, 231.77043807912327, 220.7433218189977, 266.20046420777203, 134.69112157331674, 235.95706935014704, 193.99680910232013, 230.78493460041594, 134.5313519800788, 191.77935962476175, 191.14212432328617, 216.14142839671425, 0, 92.12468414815835, 264.9508826916978, 230.11443020874276, 229.94120345902272, 191.65076059480342, 215.08053161712212], [79.3208106174306, 200.82660517838258, 164.79548910295762, 218.74143729834054, 212.4266999175457, 255.5834701240326, 95.01301887830611, 222.97320261191726, 179.47452409556956, 221.46991003707282, 113.26427243083928, 175.5697691393382, 178.27371368215262, 206.69805640517254, 92.12468414815835, 0, 254.9265135077656, 213.83549881211633, 214.1563501205561, 174.04686133945188, 199.1120391227575], [267.5481434763429, 237.54773977701788, 234.8325086194369, 240.0168471707118, 231.62705550990873, 164.00872627559357, 260.5487310367412, 279.9309213094799, 226.45478601846625, 274.7964977342613, 276.4828817936228, 235.14987515971558, 222.18140017998863, 268.76940905681136, 264.9508826916978, 254.9265135077656, 0, 240.17717840280085, 246.0539913117063, 202.62322637651664, 272.3269011873485], [228.93733518333116, 184.5878004025644, 178.6226602770865, 190.92568753654288, 207.15235165616917, 237.2968549086824, 221.66585510922323, 243.24054814477054, 175.83045688492714, 225.63692255875347, 234.91608705410067, 188.25169744923832, 175.75782795145366, 231.35271418836462, 230.11443020874276, 213.83549881211633, 240.17717840280085, 0, 221.65335243870612, 164.68527147378575, 242.98709215692423], [229.12208975209967, 200.49278363468954, 196.06949328122818, 225.0394786802554, 225.22559063944286, 249.19877964373237, 228.5605188663794, 270.3377995011661, 199.31922159620703, 227.94994312203502, 240.56484969983183, 193.81880480267193, 199.5152824772706, 233.24084473728203, 229.94120345902272, 214.1563501205561, 246.0539913117063, 221.65335243870612, 0, 171.88226304789882, 227.1771778969206], [190.4569096041423, 161.33543965887557, 146.57869570369465, 170.57128823534998, 179.64280934485944, 208.79501190157703, 184.14332644541517, 215.50056605225694, 102.98784251506677, 200.31489624016476, 205.49104117347176, 150.05728426167317, 109.15032051332956, 203.57896037124226, 191.65076059480342, 174.04686133945188, 202.62322637651664, 164.68527147378575, 171.88226304789882, 0, 209.6590696313302], [211.12240415472561, 198.5658986195124, 198.8153761835749, 232.31251378583315, 228.78427344408217, 266.4936046148154, 216.88153363588964, 263.0060707627875, 217.41614418707707, 236.65184132948053, 211.01398802687163, 199.01314450938645, 213.33475235290695, 221.8062063230069, 215.08053161712212, 199.1120391227575, 272.3269011873485, 242.98709215692423, 227.1771778969206, 209.6590696313302, 0]]
    args = create_parser()

    cwd = os.getcwd()

    out_file_u = "outclus_unblock_{c}.out".format(c=args.cluster)
    out_file_b = "outclus_blocked_{c}.out".format(c=args.cluster)

    out_c_u = np.loadtxt(os.path.join(cwd, out_file_u), dtype=str)
    out_c_b = np.loadtxt(os.path.join(cwd, out_file_b), dtype=str)

    dist = all_dist[int(args.cluster)]
    
    x_dist = []
    out_c_diff = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
    for index, oc in enumerate(out_c_u):
        prompt_cluster = int(out_c_u[index][1])

        out_c_diff[prompt_cluster].append(float(out_c_u[index][0]) - float(out_c_b[index][0]))
        

    print(len(out_c_diff))
    print(np.mean(out_c_diff[0]))
    cluster_diff = []
    cluster_std = []
    for index, oc in enumerate(out_c_diff):
        avg_diff = np.mean(np.absolute(out_c_diff[index]))
        #avg_diff = np.mean(out_c_diff[index])
        avg_std = np.std(out_c_diff[index])
        if not np.isnan(avg_diff):
            cluster_diff.append(avg_diff)
            cluster_std.append(avg_std)
            x_dist.append(dist[index])
    
    #print(out_c_processed)

    fig, ax = plt.subplots()

    z = np.polyfit(x_dist, cluster_diff, 1)
    print(z)
    p = np.poly1d(z)
    
    print(x_dist)
    print(cluster_diff)
    ax.scatter(x_dist, cluster_diff,s=60, alpha=0.7, edgecolors="k")
    #ax.errorbar(dist, cluster_diff, yerr=cluster_std, fmt="o")
    ax.plot(x_dist,p(x_dist), color="k", lw=2.5)
    ax.set_ylabel('Unblocked CLIP Score - Blocked CLIP Score')
    ax.set_xlabel('Centroid Distance')
    ax.legend()
    ax.set_title('Absolute Difference in CLIP Score Similarity vs Cluster Centroid Distances {}'.format(args.cluster))
    ax.yaxis.grid(True)
    for i, txt in enumerate(cluster_diff):
        ax.annotate('{:.3}'.format(txt), (x_dist[i], cluster_diff[i]))

    xfig, yfig = plt.gcf().get_size_inches()

    # find text coordinates at midpoint of regression line
    xtext = (min(x_dist) + max(x_dist)) // 2
    ytext = z[0]*xtext + z[1]

    # find run and rise of (xtext, ytext) vs (0, n)
    dx = xtext
    dy = ytext - z[1]

    # normalize to ax and fig scales
    xnorm = dx * xfig / (max(x_dist) - min(x_dist))
    ynorm = dy * yfig / (max(cluster_diff) - min(cluster_diff))

    # find normalized annotation angle in radians
    rotation = np.rad2deg(np.arctan2(ynorm, xnorm))

    ax.annotate(
        f'slope={z[0]:.5f}',
    (xtext-10, ytext), xycoords='data',
    ha='center', va='bottom',
    rotation=rotation, rotation_mode='anchor',
)
    fig.savefig(args.fname)


if __name__ == "__main__":
    main()
